definitions:
  db.AssetInventory:
    properties:
      businessValue:
        type: integer
      criticality:
        type: string
      description:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      replacementCost:
        type: number
      responsible:
        type: string
      roleInTargetEnvironment:
        type: string
      users:
        type: string
    type: object
  db.ControlLibrary:
    properties:
      controlReference:
        type: string
      controlType:
        type: string
      id:
        type: integer
      inScope:
        type: boolean
      information:
        type: string
    type: object
  db.Frequency:
    properties:
      id:
        type: integer
      maxFrequency:
        type: number
      minFrequency:
        type: number
      mostLikelyFrequency:
        type: number
      supportingInformation:
        type: string
      threatEvent:
        type: string
      threatEventID:
        type: integer
    type: object
  db.LossHigh:
    properties:
      assets:
        type: string
      id:
        type: integer
      lossType:
        type: string
      maximumLoss:
        type: number
      minimumLoss:
        type: number
      mostLikelyLoss:
        type: number
      threatEvent:
        type: string
      threatEventID:
        type: integer
    type: object
  db.RelevanceDinamic:
    properties:
      controlId:
        type: integer
      id:
        type: integer
    type: object
  db.RelevanceDinamicInput:
    properties:
      controlId:
        type: integer
    type: object
  db.RiskCalculation:
    properties:
      estimate:
        type: number
      id:
        type: integer
      max:
        type: number
      min:
        type: number
      mode:
        type: number
      riskType:
        type: string
      threatEvent:
        type: string
      threatEventID:
        type: integer
    type: object
  db.ThreatEventAssets:
    properties:
      affected_asset:
        type: string
      id:
        type: integer
      threat_event:
        type: string
      threat_id:
        type: integer
    type: object
  db.ThreatEventCatalog:
    properties:
      description:
        type: string
      id:
        type: integer
      inScope:
        type: boolean
      threatEvent:
        type: string
      threatGroup:
        type: string
    type: object
  interfaces.ImplementsInput:
    properties:
      controlId:
        type: integer
      cost:
        type: integer
      current:
        type: integer
      proposed:
        type: integer
    type: object
  interfaces.InputAssetsInventory:
    properties:
      business_value:
        type: integer
      criticality:
        type: string
      description:
        type: string
      location:
        type: string
      name:
        type: string
      replacement_cost:
        type: number
      responsible:
        type: string
      target_environment:
        type: string
      users:
        type: string
    type: object
  interfaces.InputControlLibrary:
    properties:
      control_reference:
        type: string
      control_type:
        type: string
      controlId:
        type: integer
      in_scope:
        type: string
      information:
        type: string
    type: object
  interfaces.InputFrequency:
    properties:
      max_frequency:
        type: integer
      min_frequency:
        type: integer
      most_common_frequency:
        type: integer
      support_information:
        type: string
      threat_event:
        type: string
      threat_event_id:
        type: integer
    type: object
  interfaces.InputThreatEventCatalogue:
    properties:
      description:
        type: string
      id:
        type: integer
      in_scope:
        type: boolean
      threat_event:
        type: string
      threat_group:
        type: string
    type: object
  interfaces.RiskCalc:
    properties:
      metric:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is a server for app.
  title: Qira
  version: "1.0"
paths:
  /api/Risk:
    get:
      consumes:
      - application/json
      description: Retrieve all Risks
      produces:
      - application/json
      responses:
        "200":
          description: List of All Risks
          schema:
            items:
              $ref: '#/definitions/db.RiskCalculation'
            type: array
      summary: Retrieve All Risks
      tags:
      - Risk
  /api/Risk/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an Risk by its ID
      parameters:
      - description: Risk ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Risk Details
          schema:
            $ref: '#/definitions/db.RiskCalculation'
      summary: Retrieve Risk by ID
      tags:
      - Risk
  /api/all-catalogue:
    get:
      consumes:
      - application/json
      description: Retrieve all Event
      produces:
      - application/json
      responses:
        "200":
          description: List of All Event
          schema:
            $ref: '#/definitions/db.ThreatEventCatalog'
      summary: Retrieve All Catalogue
      tags:
      - Catalogue
  /api/all-control:
    get:
      consumes:
      - application/json
      description: Retrieve all Event
      produces:
      - application/json
      responses:
        "200":
          description: List of All Event
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Retrieve All Control
      tags:
      - Control
  /api/all-event:
    get:
      consumes:
      - application/json
      description: Event
      produces:
      - application/json
      responses:
        "200":
          description: Your Frequency is by add
          schema:
            $ref: '#/definitions/db.ThreatEventAssets'
      summary: Event
      tags:
      - Event
  /api/all-frequency:
    get:
      consumes:
      - application/json
      description: Retrieve all Event
      produces:
      - application/json
      responses:
        "200":
          description: List of All Frequency
          schema:
            items:
              $ref: '#/definitions/db.Frequency'
            type: array
      summary: Retrieve All Frequency
      tags:
      - Frequency
  /api/all-implementation:
    get:
      consumes:
      - application/json
      description: Retrieve all Implementation
      produces:
      - application/json
      responses:
        "200":
          description: List of All Implementation
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Retrieve All Implementation Implementation
      tags:
      - Control
  /api/asset/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an asset by its ID
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Asset Details
          schema:
            $ref: '#/definitions/db.AssetInventory'
      summary: Retrieve Asset by ID
      tags:
      - Inventory
  /api/assets:
    get:
      consumes:
      - application/json
      description: Retrieve all assets
      produces:
      - application/json
      responses:
        "200":
          description: List of All Assets
          schema:
            items:
              $ref: '#/definitions/db.AssetInventory'
            type: array
      summary: Retrieve All Assets
      tags:
      - Inventory
  /api/catalogue:
    post:
      consumes:
      - application/json
      description: Create New Event Catalogue
      parameters:
      - description: Data for create new Event
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.InputThreatEventCatalogue'
      produces:
      - application/json
      responses:
        "200":
          description: List of All Events catalogues
          schema:
            $ref: '#/definitions/db.ThreatEventCatalog'
      summary: Create New Catalogue
      tags:
      - Catalogue
  /api/catalogue/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an Event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Event Details
          schema:
            $ref: '#/definitions/db.ThreatEventCatalog'
      summary: Retrieve Catalogue by ID
      tags:
      - Catalogue
  /api/control:
    post:
      consumes:
      - application/json
      description: Create New Event Control
      parameters:
      - description: Data for create new Event
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.InputControlLibrary'
      produces:
      - application/json
      responses:
        "200":
          description: List of All Assets
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Create New Control
      tags:
      - Control
  /api/control/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an Event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Event Details
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Retrieve Control by ID
      tags:
      - Control
  /api/create-Risk:
    post:
      consumes:
      - application/json
      description: Create new Risk
      parameters:
      - description: Data for create new Risk
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.RiskCalc'
      produces:
      - application/json
      responses:
        "200":
          description: Risk Create
          schema:
            $ref: '#/definitions/db.RiskCalculation'
      summary: Create Risk
      tags:
      - Risk
  /api/create-asset:
    post:
      consumes:
      - application/json
      description: Create new Asset
      parameters:
      - description: Data for create new Asset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.InputAssetsInventory'
      produces:
      - application/json
      responses:
        "200":
          description: Asset Create
          schema:
            $ref: '#/definitions/db.AssetInventory'
      summary: Create Asset
      tags:
      - Inventory
  /api/create-losshigh:
    post:
      consumes:
      - application/json
      description: Create new LossHigh
      parameters:
      - description: Data for create new LossHigh
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.LossHigh'
      produces:
      - application/json
      responses:
        "200":
          description: LossHigh Create
          schema:
            $ref: '#/definitions/db.LossHigh'
      summary: Create LossHigh
      tags:
      - losshigh
  /api/create-revelance:
    post:
      consumes:
      - application/json
      description: Create new Relevance
      parameters:
      - description: Data for create new Relevance
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.RelevanceDinamicInput'
      produces:
      - application/json
      responses:
        "200":
          description: LossHigh Create
          schema:
            $ref: '#/definitions/db.LossHigh'
      summary: Create Relevance
      tags:
      - losshigh
  /api/event:
    post:
      consumes:
      - application/json
      description: Create Event
      parameters:
      - description: Data for create new Event
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.ThreatEventAssets'
      produces:
      - application/json
      responses:
        "200":
          description: Event created successfully
          schema:
            $ref: '#/definitions/db.ThreatEventAssets'
      summary: Create Event
      tags:
      - Event
  /api/frequency:
    put:
      consumes:
      - application/json
      description: Edit Frequency
      parameters:
      - description: Edit Frequency
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.InputFrequency'
      produces:
      - application/json
      responses:
        "200":
          description: Your Frequency is by add
          schema:
            $ref: '#/definitions/db.Frequency'
      summary: Edit Frequency
      tags:
      - Frequency
  /api/frequency/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve one Frequency
      produces:
      - application/json
      responses:
        "200":
          description: List of One Frequency
          schema:
            $ref: '#/definitions/db.Frequency'
      summary: Retrieve one Frequency
      tags:
      - Frequency
  /api/implementation:
    post:
      consumes:
      - application/json
      description: Create New Event Implementation
      parameters:
      - description: Data for create new Event
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interfaces.ImplementsInput'
      produces:
      - application/json
      responses:
        "200":
          description: List of All Assets
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Create New Implementation
      tags:
      - Control
  /api/implementation/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an Implementation by its ID
      parameters:
      - description: Implementation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Implementation Details
          schema:
            $ref: '#/definitions/db.ControlLibrary'
      summary: Retrieve Implementation by ID
      tags:
      - Control
  /api/losshigh:
    get:
      consumes:
      - application/json
      description: Retrieve all LossHighs
      produces:
      - application/json
      responses:
        "200":
          description: List of All LossHighs
          schema:
            items:
              $ref: '#/definitions/db.LossHigh'
            type: array
      summary: Retrieve All LossHighs
      tags:
      - losshigh
  /api/losshigh/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an LossHigh by its ID
      parameters:
      - description: LossHigh ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: LossHigh Details
          schema:
            $ref: '#/definitions/db.LossHigh'
      summary: Retrieve LossHigh by ID
      tags:
      - losshigh
  /api/revelance:
    get:
      consumes:
      - application/json
      description: Retrieve all Revelances
      produces:
      - application/json
      responses:
        "200":
          description: List of All Revelances
          schema:
            items:
              $ref: '#/definitions/db.RelevanceDinamic'
            type: array
      summary: Retrieve All Revelances
      tags:
      - Revelance
  /api/revelance/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an Revelance by its ID
      parameters:
      - description: Revelance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Revelance Details
          schema:
            $ref: '#/definitions/db.RelevanceDinamic'
      summary: Retrieve Revelance by ID
      tags:
      - Revelance
  /api/test-token:
    post:
      consumes:
      - application/json
      description: Cria um toke para auth do usuario
      parameters:
      - default: Bearer <token>
        description: Token de autenticação
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'token make:'
          schema:
            type: string
      summary: Test Token
      tags:
      - Auth
  /token:
    get:
      consumes:
      - application/json
      description: Cria um toke para auth do usuario
      produces:
      - application/json
      responses:
        "200":
          description: 'token make:'
          schema:
            type: string
      summary: Criar token de auth
      tags:
      - Auth
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
